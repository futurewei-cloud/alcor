'MIT License
'Copyright(c) 2020 Futurewei Cloud
'
'    Permission is hereby granted,
'    free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
'    including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
'    to whom the Software is furnished to do so, subject to the following conditions:
'
'    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
'
'    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
'    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
'    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

@startuml

title VPC/Network CURD Workflow

skinparam monochrome true
collections "API Gateway" as api
collections "VPC Manager" as vpc
collections "Subnet Manager" as subnet
collections "Port Manager" as port
collections "Route Manager" as route
collections "Security Group Manager" as sg

==Show VPC/Network==
autonumber "<b>[00]"
rnote over api: ==GET /project/{project_id}/networks/{network_id}
api -> api: Authentication, authorization,\nand throttling
api -> vpc: Get a network state by Id
activate vpc
rnote over vpc: Query Database by network Id
vpc -> api: Return network state
deactivate vpc

==Create VPC/Network==
autonumber "<b>[00]"
rnote over api: ==POST /project/{project_id}/networks
api -> api: Authentication, authorization,\nand throttling
api -> vpc: Create a VPC
activate vpc
vpc -> vpc: Assign uuid, and allocate network\nsegment based on network type
vpc -> route: Create default route rules
activate route
route -> vpc: Allocate/return default route\nrules (IPv4/6)
deactivate route
vpc -> api: Persist vpc states and return
deactivate vpc

==Update a VPC/Network==
autonumber "<b>[00]"
rnote over api: ==PUT /project/{project_id}/networks
'api -> api: Authentication, authorization,\nand throttling
'api -> vpc: Create a VPC
'vpc -> vpc: Assign uuid, and allocate network\nsegment based on network type
'vpc -> route: Create default route rules
'route -> vpc: Allocate/return default route\nrules (IPv4/6)
'vpc -> api: Persist vpc states and return

==Delete a VPC/Network==
autonumber "<b>[00]"
rnote over api: ==DELETE /project/{project_id}/networks
'api -> api: Authentication, authorization,\nand throttling
'api -> vpc: Create a VPC
'vpc -> vpc: Assign uuid, and allocate network\nsegment based on network type
'vpc -> route: Create default route rules
'route -> vpc: Allocate/return default route\nrules (IPv4/6)
'vpc -> api: Persist vpc states and return

@enduml
