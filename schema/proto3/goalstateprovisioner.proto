/*
Copyright 2019 The Alcor Authors.

Licensed under the Apache License, Version 2.0 (the "License");
        you may not use this file except in compliance with the License.
        You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

        Unless required by applicable law or agreed to in writing, software
        distributed under the License is distributed on an "AS IS" BASIS,
        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        See the License for the specific language governing permissions and
        limitations under the License.
*/

syntax = "proto3";

package alcor.schema;

option java_package = "com.futurewei.alcor.schema";

import "common.proto";
import "goalstate.proto";

service GoalStateProvisioner {

    // Push a group of network resource states
    //
    // Input: a GoalState object consists of a list of operation requests, and each request contains an operation type and a resource configuration
    // Results consist of a list of operation statuses, and each status is a response to one operation request in the input
    //
    // Note: It is a NoOps for Control Agents when the operation type is INFO or GET.
    //       Use RetrieveNetworkResourceStates for state query.
    // this is for DPM->ACA
    rpc PushNetworkResourceStates (GoalState) returns (GoalStateOperationReply) {
    }

    // similar to PushGoalStatesStream with streaming GoalStateV2 and streaming GoalStateOperationReply
    // this is for DPM->NCM, and NCM->ACA
    rpc PushGoalStatesStream (stream GoalStateV2) returns (stream GoalStateOperationReply) {
    }

    // Request goal states for ACA on-demand processing and also agent restart handling
    //
    // Input: a HostRequest object consists of a list of ResourceStateRequest, and each request contains a RequestType
    // Results consist of a list of HostRequestOperationStatus, and each status is a reply to each request in the input
    // this is for ACA->NCM
    rpc RequestGoalStates (HostRequest) returns (HostRequestReply) {
    }

}

message HostRequest {
    uint32 format_version = 1;

    message ResourceStateRequest {
        RequestType request_type = 1;
        string request_id = 2; // UUID generated by ACA
        uint32 tunnel_id = 3; 
        string source_ip = 4;
        uint32 source_port = 5;
        string destination_ip = 6; 
        uint32 destination_port = 7;
        EtherType ethertype = 8;
        Protocol protocol = 9;
    }

    repeated ResourceStateRequest state_requests = 2;
}

message HostRequestReply {
    uint32 format_version = 1;

    message HostRequestOperationStatus {
        string request_id = 1; // UUID previously generated by ACA
        OperationStatus operation_status = 2;
    }

    repeated HostRequestOperationStatus operation_statuses = 2;

    // Total operation time (in microseconds)
    uint32 total_operation_time = 3;
}

message GoalStateOperationReply {
    uint32 format_version = 1;

    message GoalStateOperationStatus {
        string resource_id = 1;
        ResourceType resource_type = 2;
        OperationType operation_type = 3;
        OperationStatus operation_status = 4;
        uint32 dataplane_programming_time = 5;
        uint32 network_configuration_time = 6;
        uint32 state_elapse_time = 7;
    }

    repeated GoalStateOperationStatus operation_statuses = 2;

    // Total operation time (in microseconds)
    //    1. to process the message (consisting of multiple operations)
    //    2. to program data plane
    // Note: The list of operation_statuses details the time spent at each operation
    uint32 message_total_operation_time = 3;
}